package org.example;

import java.awt.Color;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Random;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author A. Mjeks
 */
public class CarRentalGUI extends javax.swing.JFrame {

    String custFile = "Customers.ser";
    PreparedStatement prepState;
    ResultSet resSet;
    RunCreateVehicleSer run = new RunCreateVehicleSer();

    //get and set classes
    Rental rent = new Rental();
    Customer cust = new Customer();
    Vehicle veh = new Vehicle();

    //Server
    private Socket server;
    ObjectOutputStream out;
    ObjectInputStream in;

    ArrayList<Rental> rentalsList = new ArrayList<>();

    /**
     * Creates new form CarRentalGUI
     */
    public CarRentalGUI() {
        initComponents();
        this.setLocationRelativeTo(null);

        //set outer border
        Border globalBorder = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.BLUE);
        jPanel6.setBorder(globalBorder);

        Border labelBorder = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.black);
        minimazeLabel.setBorder(labelBorder);
        closeLabel.setBorder(labelBorder);

        createSocket();
        fillExistCombo();
    }

    public Socket createSocket() {
        // Attempt to establish connection to server
        try {
            // Create socket
            server = new Socket("127.0.0.1", 8520);
        } catch (IOException ioe) {
            System.out.println("IOException: " + ioe.getMessage());
        }
        return server;
    }

    public void closeClient() {
        try {
            out.close();
            in.close();
            server.close();

        } catch (IOException ex) {
            System.out.println("IOException: " + ex.getMessage());
        }
    }

    //fill comboBox with names in the database
    public void fillExistCombo() {
        String comboQuery = "select * from Customer where fname = fname";
        try {
            prepState = run.connect().prepareStatement(comboQuery);
            resSet = prepState.executeQuery();

            while (resSet.next()) {
                custCombo.addItem(resSet.getString(2));
            }

        } catch (SQLException ex) {
            System.out.println("SQLException: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        custCombo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        vehCombo = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        custTable = new javax.swing.JTable();
        returnBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        vehTable = new javax.swing.JTable();
        rentBtn = new javax.swing.JButton();
        vehReturnDate = new com.toedter.calendar.JDateChooser();
        reportLabel = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        rentTable = new javax.swing.JTable();
        histBtn = new javax.swing.JButton();
        dispAllBtn = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        sortTable = new javax.swing.JTable();
        sortVehBtn = new javax.swing.JButton();
        sortCustBtn = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        snameTxt = new javax.swing.JTextField();
        nameTxt = new javax.swing.JTextField();
        idTxt = new javax.swing.JTextField();
        phoneTxt = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        modelTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        rentTxt = new javax.swing.JTextField();
        saveBtn1 = new javax.swing.JButton();
        clearBtn1 = new javax.swing.JButton();
        catCombo = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        closeLabel = new javax.swing.JLabel();
        minimazeLabel = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel6.setBackground(new java.awt.Color(153, 0, 153));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(102, 102, 102));

        jTabbedPane1.setBackground(new java.awt.Color(102, 102, 102));
        jTabbedPane1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N

        jPanel2.setLayout(null);

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Choose Existing Customer:");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(115, 40, 190, 31);

        custCombo.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        custCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select name..." }));
        custCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custComboActionPerformed(evt);
            }
        });
        jPanel2.add(custCombo);
        custCombo.setBounds(115, 89, 190, 31);

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Choose Vehicle Catagory:");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(531, 40, 189, 31);

        vehCombo.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        vehCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select catagory...", "Luxury Sedans", "Luxury SUV's" }));
        vehCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehComboActionPerformed(evt);
            }
        });
        jPanel2.add(vehCombo);
        vehCombo.setBounds(531, 89, 189, 31);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel7.setBackground(new java.awt.Color(102, 102, 102));

        jLabel13.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Vehicle Rented by Customer:");

        custTable.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        custTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "Rental Number", "Date of Rent", "Return Date", "Total Price"
                }
        ) {
            boolean[] canEdit = new boolean [] {
                    false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(custTable);
        if (custTable.getColumnModel().getColumnCount() > 0) {
            custTable.getColumnModel().getColumn(0).setResizable(false);
            custTable.getColumnModel().getColumn(1).setResizable(false);
            custTable.getColumnModel().getColumn(2).setResizable(false);
            custTable.getColumnModel().getColumn(3).setResizable(false);
        }

        returnBtn.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        returnBtn.setText("Return");
        returnBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        returnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Return Date:");

        vehTable.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        vehTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "Module", "Catagory", "Rental Price", "Available"
                }
        ) {
            boolean[] canEdit = new boolean [] {
                    false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(vehTable);
        if (vehTable.getColumnModel().getColumnCount() > 0) {
            vehTable.getColumnModel().getColumn(0).setResizable(false);
            vehTable.getColumnModel().getColumn(1).setResizable(false);
            vehTable.getColumnModel().getColumn(2).setResizable(false);
            vehTable.getColumnModel().getColumn(3).setResizable(false);
        }

        rentBtn.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        rentBtn.setText("Rent");
        rentBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentBtnActionPerformed(evt);
            }
        });

        vehReturnDate.setToolTipText("select return date");
        vehReturnDate.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        vehReturnDate.setMinSelectableDate(new java.util.Date(-62135773128000L));

        reportLabel.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        reportLabel.setForeground(new java.awt.Color(255, 255, 255));
        reportLabel.setText("Display Rentals:");

        jLabel17.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("List & Sort All:");

        rentTable.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        rentTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "Rental Number", "Date of Rent", "Return Date", "Total Price"
                }
        ) {
            boolean[] canEdit = new boolean [] {
                    false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(rentTable);
        if (rentTable.getColumnModel().getColumnCount() > 0) {
            rentTable.getColumnModel().getColumn(0).setResizable(false);
            rentTable.getColumnModel().getColumn(1).setResizable(false);
            rentTable.getColumnModel().getColumn(2).setResizable(false);
            rentTable.getColumnModel().getColumn(3).setResizable(false);
        }

        histBtn.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        histBtn.setText("History");
        histBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        histBtn.setMaximumSize(new java.awt.Dimension(99, 25));
        histBtn.setMinimumSize(new java.awt.Dimension(99, 25));
        histBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histBtnActionPerformed(evt);
            }
        });

        dispAllBtn.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        dispAllBtn.setText("Outstanding");
        dispAllBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        dispAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispAllBtnActionPerformed(evt);
            }
        });

        sortTable.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        sortTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {
                        "Module", "Catagory", "Rental Price", "Available"
                }
        ) {
            boolean[] canEdit = new boolean [] {
                    false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(sortTable);
        if (sortTable.getColumnModel().getColumnCount() > 0) {
            sortTable.getColumnModel().getColumn(0).setResizable(false);
            sortTable.getColumnModel().getColumn(1).setResizable(false);
            sortTable.getColumnModel().getColumn(2).setResizable(false);
            sortTable.getColumnModel().getColumn(3).setResizable(false);
        }

        sortVehBtn.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        sortVehBtn.setText("Vehicles");
        sortVehBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sortVehBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortVehBtnActionPerformed(evt);
            }
        });

        sortCustBtn.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        sortCustBtn.setText("Customers");
        sortCustBtn.setToolTipText("Show All Customers Sorted");
        sortCustBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sortCustBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortCustBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(177, 177, 177)
                                .addComponent(returnBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(rentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(188, 188, 188))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addGap(25, 25, 25)
                                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel13)
                                                        .addComponent(reportLabel)
                                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addGap(68, 68, 68)
                                                .addComponent(histBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(100, 100, 100)
                                                .addComponent(dispAllBtn)))
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGroup(jPanel7Layout.createSequentialGroup()
                                                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(vehReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(52, 52, 52))
                                        .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addGap(98, 98, 98)
                                                .addComponent(sortVehBtn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(sortCustBtn)
                                                .addGap(86, 86, 86))))
        );
        jPanel7Layout.setVerticalGroup(
                jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(vehReturnDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(returnBtn)
                                        .addComponent(rentBtn))
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(sortVehBtn)
                                                .addGap(55, 55, 55))
                                        .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addGap(43, 43, 43)
                                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(reportLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel7Layout.createSequentialGroup()
                                                                .addGap(18, 18, 18)
                                                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(18, 18, 18)
                                                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(histBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(dispAllBtn))
                                                                .addContainerGap(55, Short.MAX_VALUE))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(sortCustBtn)
                                                                .addGap(54, 54, 54))))))
        );

        jScrollPane3.setViewportView(jPanel7);

        jPanel2.add(jScrollPane3);
        jScrollPane3.setBounds(0, 126, 835, 331);

        jLabel14.setIcon(new ImageIcon("2.jpg")); // NOI18N
        jPanel2.add(jLabel14);
        jLabel14.setBounds(0, 0, 835, 485);

        jTabbedPane1.addTab("     Rent Vehicle     ", new ImageIcon("favicon2.jpg"), jPanel2); // NOI18N

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Create Customer:");

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Name:");

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Surname:");

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("I.D Number:");

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Phone Number:");

        snameTxt.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        nameTxt.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N

        idTxt.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        idTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                idTxtKeyTyped(evt);
            }
        });

        phoneTxt.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        phoneTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                phoneTxtKeyTyped(evt);
            }
        });

        saveBtn.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        clearBtn.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        clearBtn.setText("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 835, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(81, 81, 81))
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel4)
                                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel6)
                                                                        .addComponent(jLabel7)
                                                                        .addComponent(jLabel8)
                                                                        .addComponent(jLabel9))
                                                                .addGap(153, 153, 153)
                                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(phoneTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(idTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(snameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel7)
                                        .addComponent(snameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(idTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(phoneTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(saveBtn)
                                        .addComponent(clearBtn))
                                .addGap(34, 34, 34))
        );

        jTabbedPane1.addTab("     Add New Customer     ", new ImageIcon("/favicon3.png"), jPanel3); // NOI18N

        jPanel4.setLayout(null);

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Create Vehicle:");
        jPanel4.add(jLabel5);
        jLabel5.setBounds(76, 40, 131, 31);
        jPanel4.add(jSeparator3);
        jSeparator3.setBounds(0, 77, 835, 2);

        jLabel10.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Model:");
        jPanel4.add(jLabel10);
        jLabel10.setBounds(75, 131, 55, 35);

        modelTxt.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jPanel4.add(modelTxt);
        modelTxt.setBounds(330, 132, 237, 30);

        jLabel11.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Category:");
        jPanel4.add(jLabel11);
        jLabel11.setBounds(75, 197, 67, 37);

        jLabel12.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Rental Price:");
        jPanel4.add(jLabel12);
        jLabel12.setBounds(75, 266, 89, 37);

        rentTxt.setEditable(false);
        rentTxt.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jPanel4.add(rentTxt);
        rentTxt.setBounds(330, 266, 130, 30);

        saveBtn1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        saveBtn1.setText("Save");
        saveBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtn1ActionPerformed(evt);
            }
        });
        jPanel4.add(saveBtn1);
        saveBtn1.setBounds(679, 422, 74, 25);

        clearBtn1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        clearBtn1.setText("Clear");
        clearBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtn1ActionPerformed(evt);
            }
        });
        jPanel4.add(clearBtn1);
        clearBtn1.setBounds(75, 422, 74, 25);

        catCombo.setBackground(new java.awt.Color(102, 102, 102));
        catCombo.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        catCombo.setForeground(new java.awt.Color(153, 153, 153));
        catCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select category...", "Sedan", "SUV" }));
        catCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                catComboActionPerformed(evt);
            }
        });
        jPanel4.add(catCombo);
        catCombo.setBounds(330, 200, 130, 30);

        jLabel15.setIcon(new ImageIcon("1.jpg")); // NOI18N
        jPanel4.add(jLabel15);
        jLabel15.setBounds(0, 0, 835, 485);

        jTabbedPane1.addTab("     Add New Vehicle     ", new ImageIcon("favicon.jpg"), jPanel4); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTabbedPane1)
        );
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTabbedPane1)
        );

        closeLabel.setFont(new java.awt.Font("SansSerif", 1, 16)); // NOI18N
        closeLabel.setText(" X ");
        closeLabel.setToolTipText("Exit");
        closeLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeLabelMouseExited(evt);
            }
        });

        minimazeLabel.setFont(new java.awt.Font("SansSerif", 1, 25)); // NOI18N
        minimazeLabel.setText(" - ");
        minimazeLabel.setToolTipText("minimaze");
        minimazeLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minimazeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimazeLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minimazeLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                minimazeLabelMouseExited(evt);
            }
        });

        jPanel8.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 50, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(minimazeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(closeLabel)
                                .addContainerGap())
                        .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(closeLabel)
                                        .addComponent(minimazeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, 0)
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel6Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, 0)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String name = nameTxt.getText().trim();
            String sname = snameTxt.getText().trim();
            String idNum = idTxt.getText().trim();
            String phoneNum = phoneTxt.getText().trim();
            Boolean canRent = true;

            if (idNum.length() > 13 || phoneNum.length() > 10) {
                JOptionPane.showMessageDialog(null, "I.D or Phone Number text field is OUT OF BOUND", "Error", 2);

            } else if (name.equals("") || sname.equals("") || idNum.equals("") || phoneNum.equals("")) {
                JOptionPane.showMessageDialog(null, "You cannot have Empty field(s)", "Error", 2);

            } else {
                out = new ObjectOutputStream(server.getOutputStream());
                out.flush();
                in = new ObjectInputStream(server.getInputStream());

                out.writeObject("Save Customer");

                cust = new Customer(name, sname, idNum, phoneNum, canRent);
                out.writeObject(cust);

                // Add New Customer
                Random rand = new Random();
                long custNumber = Math.abs(1000000 + rand.nextInt(10000000));
                out.writeObject(custNumber);
                out.flush();
                custCombo.addItem(name);

                nameTxt.setText("");
                snameTxt.setText("");
                idTxt.setText("");
                phoneTxt.setText("");

                JOptionPane.showMessageDialog(null, "New Customer Added");
            }

        } catch (IOException ex) {
            System.out.println("IOException: " + ex.getMessage());
        }
    }

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // Clear fields
        nameTxt.setText("");
        snameTxt.setText("");
        idTxt.setText("");
        phoneTxt.setText("");
    }

    private void saveBtn1ActionPerformed(java.awt.event.ActionEvent evt) {
        // Save Vehicle info
        String model = modelTxt.getText().trim();
        String catName = "";
        double pricePerD = 0;
        if (catCombo.getSelectedIndex() == 1) {
            catName = "Sedan";
            pricePerD = Double.parseDouble(rentTxt.getText());
        } else if (catCombo.getSelectedIndex() == 2) {
            catName = "SUV";
            pricePerD = Double.parseDouble(rentTxt.getText());
        }
        Boolean availForRent = true;

        if (model.equals("") || (catCombo.getSelectedIndex() == 0)) {
            JOptionPane.showMessageDialog(null, "You cannot have Empty field(s)", "Error", 2);
        } else {
            try {
                out = new ObjectOutputStream(server.getOutputStream());
                out.flush();
                in = new ObjectInputStream(server.getInputStream());

                out.writeObject("Save Vehicle");

                veh = new Vehicle(model, catCombo.getSelectedIndex(), pricePerD, availForRent);
                out.writeObject(veh);

                Random rand = new Random();
                long vehNumber = Math.abs(10000 + rand.nextInt(100000));
                out.writeObject(vehNumber);

                out.flush();
                JOptionPane.showMessageDialog(null, "New Vehicle Added");

                modelTxt.setText("");
                catCombo.setSelectedIndex(0);
                rentTxt.setText("");

            } catch (IOException ex) {
                System.out.println("IOException: " + ex.getMessage());
            }
        }
    }

    private void clearBtn1ActionPerformed(java.awt.event.ActionEvent evt) {
        // clear Vehicle text fields
        modelTxt.setText("");
        catCombo.setSelectedIndex(0);
        rentTxt.setText("");
    }

    private void returnBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if (custTable.isRowSelected(custTable.getSelectedRow()) == false || custCombo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Select customers name or row in table", "Notification", 2);
        } else {
            try {
                out = new ObjectOutputStream(server.getOutputStream());
                out.flush();
                in = new ObjectInputStream(server.getInputStream());
                out.writeObject("Return Vehicle");

                int rowSelected = custTable.getSelectedRow();
                TableModel model = custTable.getModel();
                long returnNum = (long) model.getValueAt(rowSelected, 0);
                out.writeObject(returnNum);

                System.out.println("From Server>> " + in.readObject());
                JOptionPane.showMessageDialog(null, "Vehicle returned");
                custCombo.setSelectedIndex(0);
                custTable.setModel(new DefaultTableModel(null, new Object[]{"Rental Number",
                        "Date of Rent", "Return Date", "Total Price"}));

            } catch (IOException ex) {
                System.out.println("IOException: " + ex.getMessage());
            } catch (ClassNotFoundException ex) {
                System.out.println("ClassNotFoundException: " + ex.getMessage());
            }
        }
    }

    private void closeLabelMouseClicked(java.awt.event.MouseEvent evt) {
        System.exit(0);
        run.closeServer();
        closeClient();
    }

    private void minimazeLabelMouseClicked(java.awt.event.MouseEvent evt) {
        this.setState(JFrame.ICONIFIED);
    }

    private void minimazeLabelMouseExited(java.awt.event.MouseEvent evt) {
        Border labelBorder = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.black);
        minimazeLabel.setBorder(labelBorder);
        minimazeLabel.setForeground(Color.black);
    }

    private void minimazeLabelMouseEntered(java.awt.event.MouseEvent evt) {
        Border labelBorder = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.MAGENTA);
        minimazeLabel.setBorder(labelBorder);
        minimazeLabel.setForeground(Color.red);
    }

    private void closeLabelMouseExited(java.awt.event.MouseEvent evt) {
        //close color when not clicked
        Border labelBorder = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.black);
        closeLabel.setBorder(labelBorder);
        closeLabel.setForeground(Color.black);
    }

    private void closeLabelMouseEntered(java.awt.event.MouseEvent evt) {
        //close colour when clicked
        Border labelBorder = BorderFactory.createMatteBorder(1, 1, 1, 1, Color.MAGENTA);
        closeLabel.setBorder(labelBorder);
        closeLabel.setForeground(Color.red);
    }

    private void vehComboActionPerformed(java.awt.event.ActionEvent evt) {
        //fill vehicle Table
        if (vehCombo.getSelectedIndex() == 0) {
            vehTable.setModel(new DefaultTableModel(null, new Object[]{"Module",
                    "Category", "Rental Price", "Available"}));
        }
        if (vehCombo.getSelectedIndex() == 1) {
            try {
                vehTable.setModel(new DefaultTableModel(null, new Object[]{"Module",
                        "Category", "Rental Price", "Available"}));

                String query = "Select * from Vehicle where category = ?";
                DefaultTableModel vTable = (DefaultTableModel) vehTable.getModel();

                prepState = run.connect().prepareStatement(query);
                prepState.setString(1, "Sedan");
                resSet = prepState.executeQuery();

                Object row[];
                while (resSet.next()) {
                    row = new Object[4];
                    row[0] = resSet.getString(2);
                    row[1] = resSet.getString(3);
                    row[2] = resSet.getDouble(4);
                    row[3] = resSet.getString(5);

                    vTable.addRow(row);
                }
            } catch (SQLException ex) {
                System.out.println("SQLException: " + ex.getMessage());
            }
        } else if (vehCombo.getSelectedIndex() == 2) {
            try {
                String query = "Select * from Vehicle where category = ?";
                vehTable.setModel(new DefaultTableModel(null, new Object[]{"Module",
                        "Category", "Rental Price", "Available"}));

                DefaultTableModel vTable = (DefaultTableModel) vehTable.getModel();

                prepState = run.connect().prepareStatement(query);
                prepState.setString(1, "SUV");
                resSet = prepState.executeQuery();

                Object row[];
                while (resSet.next()) {
                    row = new Object[4];
                    row[0] = resSet.getString(2);
                    row[1] = resSet.getString(3);
                    row[2] = resSet.getDouble(4);
                    row[3] = resSet.getString(5);

                    vTable.addRow(row);
                }

            } catch (SQLException ex) {
                System.out.println("SQLException: " + ex.getMessage());
            }
        }
    }

    private void rentBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if (custCombo.getSelectedIndex() == 0 || vehReturnDate.getDate() == null
                || vehCombo.getSelectedIndex() == 0 || vehTable.isRowSelected(vehTable.getSelectedRow()) == false) {
            JOptionPane.showMessageDialog(null, "Select all fields to rent", "Notification", 2);
        } else {
            try {
                out = new ObjectOutputStream(server.getOutputStream());
                out.flush();
                in = new ObjectInputStream(server.getInputStream());
                //message
                out.writeObject("Rent Vehicle");

                Random rand = new Random();
                long rentNum = Math.abs(100 + rand.nextInt(1000));

                //get selected customer name
                String custName = String.valueOf(custCombo.getSelectedItem());
                out.writeObject(custName);

                //message from server
                long custNum = (long) in.readObject();

                //get vehicle make of selected row
                int rowNum = vehTable.getSelectedRow();
                TableModel model = vehTable.getModel();
                String module = String.valueOf(model.getValueAt(rowNum, 0));
                out.writeObject(module);

                //from server
                long vehNum = (long) in.readObject();

                //Format of current date
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                LocalDateTime now = LocalDateTime.now();
                String currentDate = dtf.format(now);

                //change date return type
                SimpleDateFormat datef = new SimpleDateFormat("dd-MM-yyyy");
                Date userDate = datef.parse(currentDate);

                //Return date
                String formatReturnDate = datef.format(vehReturnDate.getDate());
                Date returnDate = datef.parse(formatReturnDate);
                String carReturnDate = datef.format(returnDate);

                //Calculate price
                long diffInMills = Math.abs(returnDate.getTime() - userDate.getTime());
                long dateDiff = TimeUnit.DAYS.convert(diffInMills, TimeUnit.MILLISECONDS);

                double pricePerD = 0;
                double totalPrice = 0;
                if (vehCombo.getSelectedIndex() == 1) {
                    pricePerD = 450;
                    totalPrice = pricePerD * dateDiff;
                } else if (vehCombo.getSelectedIndex() == 2) {
                    pricePerD = 500;
                    totalPrice = pricePerD * dateDiff;
                }

                rent = new Rental(rentNum, custNum, vehNum, currentDate, carReturnDate, pricePerD, totalPrice);
                out.writeObject(rent);
                rentalsList.add(rent);

                System.out.println("From Server>>" + in.readObject());
                out.flush();

                JOptionPane.showMessageDialog(null, "Rent Successful");
                custCombo.setSelectedIndex(0);
                vehCombo.setSelectedIndex(0);
                vehReturnDate.setDate(null);
                vehTable.setModel(new DefaultTableModel(null, new Object[]{"Module",
                        "Category", "Rental Price", "Available"}));

            } catch (ParseException ex) {
                System.out.println("ParseException: " + ex.getMessage());
            } catch (IOException ex) {
                System.out.println("IOException: " + ex.getMessage());
            } catch (ClassNotFoundException ex) {
                System.out.println("ClassNotFoundException: " + ex.getMessage());
            }
        }
    }

    private void catComboActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int categoryIndex = catCombo.getSelectedIndex();

        switch (categoryIndex) {
            case 1:
                rentTxt.setText("450");
                break;
            case 2:
                rentTxt.setText("500");
                break;
            default:
                rentTxt.setText("");
        }
    }

    private void idTxtKeyTyped(java.awt.event.KeyEvent evt) {
        //Only allow numbers
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }

    private void phoneTxtKeyTyped(java.awt.event.KeyEvent evt) {
        //Only allow numbers
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }

    private void custComboActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String name = "select * from Customer WHERE fname = ?";
        String userName = custCombo.getSelectedItem().toString();

        long custNum = 0;
        try {
            prepState = run.connect().prepareStatement(name);
            prepState.setString(1, userName);
            resSet = prepState.executeQuery();

            while (resSet.next()) {
                if (userName.equals(resSet.getString(2))) {
                    custTable.setModel(new DefaultTableModel(null, new Object[]{"Rental Number",
                            "Date of Rent", "Return Date", "Total Price"}));
                    custNum = resSet.getLong(1);

                }
            }

            String rental = "select * from Rental WHERE custNumber = ?";
            prepState = run.connect().prepareStatement(rental);
            prepState.setLong(1, custNum);
            resSet = prepState.executeQuery();

            Object row[];
            while (resSet.next()) {
                if (custNum == resSet.getLong(2)) {
                    custTable.setModel(new DefaultTableModel(null, new Object[]{"Rental Number",
                            "Date of Rent", "Return Date", "Total Price"}));
                    DefaultTableModel cTable = (DefaultTableModel) custTable.getModel();

                    row = new Object[4];
                    row[0] = resSet.getLong(1);
                    row[1] = resSet.getString(4);
                    row[2] = resSet.getString(5);
                    row[3] = resSet.getDouble(7);

                    cTable.addRow(row);

                } else if (custNum != resSet.getLong(2)) {
                    custTable.setModel(new DefaultTableModel(null, new Object[]{"Rental Number",
                            "Date of Rent", "Return Date", "Total Price"}));
                }
            }
        } catch (SQLException ex) {
            System.out.println("SQLException: " + ex.getMessage());
        }

    }

    private void histBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        rentTable.setModel(new DefaultTableModel(null, new Object[]{"Rental Number",
                "Date of Rent", "Return Date", "Total Price"}));

        DefaultTableModel rentalTable = (DefaultTableModel) rentTable.getModel();

        Object row[];
        for (int x = 0; x < rentalsList.size(); x++) {
            row = new Object[4];
            row[0] = rentalsList.get(x).getRentalNumber();
            row[1] = rentalsList.get(x).getDateRental();
            row[2] = rentalsList.get(x).getDateReturned();
            row[3] = "R" + rentalsList.get(x).getTotalRental();

            rentalTable.addRow(row);
        }

    }

    private void dispAllBtnActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String outstandingQuery = "select * from Rental";
            prepState = run.connect().prepareStatement(outstandingQuery);
            resSet = prepState.executeQuery();

            rentTable.setModel(new DefaultTableModel(null, new Object[]{"Rental Number",
                    "Date of Rent", "Return Date", "Total Price"}));

            Object row[];
            while (resSet.next()) {
                row = new Object[4];
                row[0] = resSet.getLong(1);
                row[1] = resSet.getString(4);
                row[2] = resSet.getString(5);
                row[3] = "R" + resSet.getDouble(7);

                DefaultTableModel rTable = (DefaultTableModel) rentTable.getModel();
                rTable.addRow(row);
            }

        } catch (SQLException ex) {
            System.out.println("SQLException: " + ex.getMessage());
        }

    }

    private void sortVehBtnActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String sortVehQuery = "select * from Vehicle order by category ASC";
            prepState = run.connect().prepareStatement(sortVehQuery);
            resSet = prepState.executeQuery();

            sortTable.setModel(new DefaultTableModel(null, new Object[]{"Veh Number",
                    "Make", "Category", "Rent Price"}));
            DefaultTableModel sorTable = (DefaultTableModel) sortTable.getModel();

            Object row[];
            while (resSet.next()) {
                row = new Object[4];
                row[0] = resSet.getLong(1);
                row[1] = resSet.getString(2);
                row[2] = resSet.getString(3);
                row[3] = "R" + resSet.getDouble(4);

                sorTable.addRow(row);
            }

        } catch (SQLException ex) {
            Logger.getLogger(CarRentalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void sortCustBtnActionPerformed(java.awt.event.ActionEvent evt) {
        // Sort customers by last name
        try {
            String sortCustQuery = "select * from Customer order by lname ASC";
            prepState = run.connect().prepareStatement(sortCustQuery);
            resSet = prepState.executeQuery();

            sortTable.setModel(new DefaultTableModel(null, new Object[]{"Cust Number",
                    "Last Name", "I.D Number", "Phone Number"}));
            DefaultTableModel rTable = (DefaultTableModel) sortTable.getModel();

            Object row[];
            while (resSet.next()) {
                row = new Object[4];
                row[0] = resSet.getLong(1);
                row[1] = resSet.getString(3);
                row[2] = resSet.getString(4);
                row[3] = resSet.getString(5);

                rTable.addRow(row);
            }

        } catch (SQLException ex) {
            Logger.getLogger(CarRentalGUI.class.getName()).log(Level.SEVERE, null, ex);
        }


    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(CarRentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(CarRentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(CarRentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(CarRentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new CarRentalGUI().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify
    private javax.swing.JComboBox<String> catCombo;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton clearBtn1;
    private javax.swing.JLabel closeLabel;
    private javax.swing.JComboBox<String> custCombo;
    private javax.swing.JTable custTable;
    private javax.swing.JButton dispAllBtn;
    private javax.swing.JButton histBtn;
    private javax.swing.JTextField idTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel minimazeLabel;
    private javax.swing.JTextField modelTxt;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JTextField phoneTxt;
    private javax.swing.JButton rentBtn;
    private javax.swing.JTable rentTable;
    private javax.swing.JTextField rentTxt;
    private javax.swing.JLabel reportLabel;
    private javax.swing.JButton returnBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton saveBtn1;
    private javax.swing.JTextField snameTxt;
    private javax.swing.JButton sortCustBtn;
    private javax.swing.JTable sortTable;
    private javax.swing.JButton sortVehBtn;
    private javax.swing.JComboBox<String> vehCombo;
    private com.toedter.calendar.JDateChooser vehReturnDate;
    private javax.swing.JTable vehTable;
    // End of variables declaration
}
